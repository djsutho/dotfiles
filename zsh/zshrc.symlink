# using `gdate` on osx
date_fn="date"
if (( $+commands[gdate] ))
then
  date_fn="gdate"
fi

local start_time=$(($($date_fn +%s%0N)/1000000))

print_elapsed() {
    now=$(($($date_fn +%s%0N)/1000000))
    elapsed=$(($now-$start_time))
    # echo "$1 ${elapsed}ms"
}


# shortcut to this dotfiles path is $DF_PATH
export DF_PATH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/dev

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($DF_PATH/***/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# Better history
# Credits to https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

[[ -n "${key[Up]}"      ]] && bindkey  "${key[Up]}"      history-beginning-search-backward
[[ -n "${key[Down]}"    ]] && bindkey  "${key[Down]}"    history-beginning-search-forward

print_elapsed "pre oh-my-zshrc"
source "$HOME/.oh-my-zshrc"

# TMOUT=1

TRAPALRM() {
    zle reset-prompt
}

print_elapsed "pre pipenv"
# inline output of `pipenv --completion` instead of using `eval "$(pipenv --completion)"`
#compdef pipenv
_pipenv() {
  eval $(env COMMANDLINE="${words[1,$CURRENT]}" _PIPENV_COMPLETE=complete-zsh  pipenv)
}
if [[ "$(basename -- ${(%):-%x})" != "_pipenv" ]]; then
  compdef _pipenv pipenv
fi

print_elapsed "pre pyenv"
eval "$(pyenv init - zsh --no-rehash)"

# Created by `userpath` on 2020-07-29 23:20:06
export PATH="$PATH:/Users/dasutherland/.local/bin"

print_elapsed "pre sdkman"
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/dasutherland/.sdkman"
[[ -s "/Users/dasutherland/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/dasutherland/.sdkman/bin/sdkman-init.sh"

print_elapsed "end"

# >>> conda initialize >>>
CONDA_AUTO_ACTIVATE_BASE=false
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="/usr/local/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

